/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <locale/keys_hu.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#define HU_I_ACUTE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))

&mt { quick-tap-ms = <200>; };

&sk { quick-release; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            slow-release;
            timeout-ms = <60>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            slow-release;
            timeout-ms = <60>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <13 12>;
            slow-release;
            timeout-ms = <60>;
        };

        grave-escape {
            bindings = <&gresc>;
            key-positions = <12 11>;
            slow-release;
            timeout-ms = <60>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
            slow-release;
            timeout-ms = <60>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <10 11>;
            slow-release;
            timeout-ms = <60>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
            slow-release;
            timeout-ms = <60>;
        };

        open-square-bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
            slow-release;
            timeout-ms = <60>;
        };

        close-square-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
            slow-release;
            timeout-ms = <60>;
        };

        lpar_lt {
            bindings = <&lpar_lt>;
            key-positions = <16 17>;
            slow-release;
            timeout-ms = <60>;
        };

        rpar_gt {
            bindings = <&rpar_gt>;
            key-positions = <17 18>;
            slow-release;
            timeout-ms = <60>;
        };
    };

    behaviors {
        hold_tap_layer: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            #binding-cells = <2>;
            bindings = <&mo>, <&to>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
        };
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <220>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <29 19 5 6 7 8 15 16 17 18 25 26 27 28 9 34 35>;
        };

        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <220>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        bt_clr_clr_all: bt_clr_clr_all {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_CLR_CLR_ALL";
            bindings = <&bt BT_CLR>, <&bt BT_CLR_ALL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        bt_select_disconnect_p0: bt_select_disconnect_p0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_SELECT_DISCONNECT_P0";
            bindings = <&bt BT_SEL 0>, <&bt BT_DISC 0>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        bt_select_disconnect_p1: bt_select_disconnect_p1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_SELECT_DISCONNECT_P1";
            bindings = <&bt BT_SEL 1>, <&bt BT_DISC 1>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        bt_select_disconnect_p2: bt_select_disconnect_p2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_SELECT_DISCONNECT_P2";
            bindings = <&bt BT_SEL 2>, <&bt BT_DISC 2>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        bt_select_disconnect_p3: bt_select_disconnect_p3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_SELECT_DISCONNECT_P3";
            bindings = <&bt BT_SEL 3>, <&bt BT_DISC 3>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        bt_select_disconnect_p4: bt_select_disconnect_p4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_SELECT_DISCONNECT_P4";
            bindings = <&bt BT_SEL 4>, <&bt BT_DISC 4>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        td_hu_a: td_hu_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_A";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&hold_tap_left LEFT_WIN A>, <&kp HU_A_ACUTE>;

        };

        td_hu_e: td_hu_e {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_E";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp E>, <&kp HU_E_ACUTE>;
        };

        td_hu_i: td_hu_i {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_I";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp I>, <&kp HU_I_ACUTE>;
        };

        td_hu_o: td_hu_o {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_O";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp O>, <&kp HU_O_ACUTE>, <&kp HU_O_UMLAUT>, <&kp HU_O_DOUBLE_ACUTE>;
        };

        td_hu_o_umlaut: td_hu_o_umlaut {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_O_UMLAUT";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp HU_O_UMLAUT>, <&kp HU_O_DOUBLE_ACUTE>;
        };

        td_hu_u: td_hu_u {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_U";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp U>, <&kp HU_U_ACUTE>, <&kp HU_U_UMLAUT>, <&kp HU_U_DOUBLE_ACUTE>;
        };

        td_hu_u_umlaut: td_hu_u_umlaut {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_HU_U_UMLAUT";
            #binding-cells = <0>;
            tapping-term-ms = <240>;
            bindings = <&kp HU_U_UMLAUT>, <&kp HU_U_DOUBLE_ACUTE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q                      &kp W                      &kp E                          &kp R                        &kp T    &kp Y  &kp U                          &kp I                            &kp O                        &kp P
  &hold_tap_left LEFT_WIN A  &hold_tap_left LEFT_ALT S  &hold_tap_left LEFT_CONTROL D  &hold_tap_left LEFT_SHIFT F  &kp G    &kp H  &hold_tap_right RIGHT_SHIFT J  &hold_tap_right RIGHT_CONTROL K  &hold_tap_right RIGHT_ALT L  &hold_tap_right RIGHT_WIN SEMICOLON
  &kp Z                      &kp X                      &kp C                          &kp V                        &kp B    &kp N  &kp M                          &kp COMMA                        &kp DOT                      &kp FSLH
                                                        &to 6                          &lt 4 SPACE                  &mo 1    &mo 2  &kp SPACE                      &lt 5 ENTER
            >;
        };

        raise_layer {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6    &kp N7     &kp N8     &kp N9     &kp N0
  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
                  &trans  &trans  &trans    &trans    &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN     &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &trans           &kp UNDERSCORE  &kp MINUS  &kp PLUS    &kp EQUAL      &trans     &trans         &trans        &trans                &kp PIPE
  &trans           &trans          &trans     &trans      &trans         &trans     &trans         &trans        &trans                &kp BACKSLASH
                                   &trans     &trans      &trans         &trans     &trans         &trans
            >;
        };

        media {
            bindings = <
  &bt_select_disconnect_p0  &bt_select_disconnect_p1  &bt_select_disconnect_p2  &bt_select_disconnect_p3  &bt_select_disconnect_p4    &trans      &trans             &trans           &trans      &kp C_PP
  &trans                    &trans                    &trans                    &trans                    &trans                      &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans
  &trans                    &bt_clr_clr_all           &trans                    &trans                    &trans                      &trans      &kp C_MUTE         &trans           &trans      &trans
                                                      &trans                    &trans                    &trans                      &trans      &trans             &trans
            >;
        };

        num_layer {
            bindings = <
  &kp MINUS  &kp N7  &kp N8  &kp N9  &kp SLASH       &none  &none  &none   &none  &none
  &kp PLUS   &kp N4  &kp N5  &kp N6  &kp ASTERISK    &none  &none  &none   &none  &none
  &kp N0     &kp N1  &kp N2  &kp N3  &kp EQUAL       &none  &none  &none   &none  &none
                     &none   &none   &none           &none  &none  &trans
            >;
        };

        fun {
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans
  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans
  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans
                   &trans  &trans  &trans             &trans  &trans  &trans
            >;
        };

        hungarian {
            bindings = <
  &trans    &trans  &td_hu_e                &trans  &trans    &trans  &td_hu_u  &td_hu_i  &td_hu_o  &trans
  &td_hu_a  &trans  &trans                  &trans  &trans    &trans  &trans    &trans    &trans    &trans
  &trans    &trans  &trans                  &trans  &trans    &trans  &trans    &trans    &trans    &trans
                    &hold_tap_layer 7 0     &trans  &trans    &trans  &trans    &trans
            >;
        };

        hungarian_umlaut {
            bindings = <
  &trans    &trans  &td_hu_e  &trans  &trans    &trans  &td_hu_u_umlaut  &td_hu_i  &td_hu_o_umlaut  &trans
  &td_hu_a  &trans  &trans    &trans  &trans    &trans  &trans           &trans    &trans           &trans
  &trans    &trans  &trans    &trans  &trans    &trans  &trans           &trans    &trans           &trans
                    &to 0     &trans  &trans    &trans  &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        media_layer_activation {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
